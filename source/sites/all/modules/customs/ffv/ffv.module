<?php


function ffv_init(){
	
}


function _arrayCheck($text){
	foreach($text as $kay => $val){
		if(is_array($val)){
			_arrayCheck($val);
		}else{
			if(in_array($key,_get_field_validtype('Black'))){
				if(ffv_validate_field($val,'Black')){
					form_set_error($key1, 'Only Black charecter allowed.');
				}
			}
		}
	}
}


function ffv_validate_url($text){
	$regex  = "((https?|ftp)\:\/\/)?"; // SCHEME
    $regex .= "([a-z0-9+!*(),;?&=\$_.-]+(\:[a-z0-9+!*(),;?&=\$_.-]+)?@)?"; // User and Pass
    $regex .= "([a-z0-9-.]*)\.([a-z]{2,3})"; // Host or IP
    $regex .= "(\:[0-9]{2,5})?"; // Port
    $regex .= "(\/([a-z0-9+\$_-]\.?)+)*\/?"; // Path
    $regex .= "(\?[a-z+&\$_.-][a-z0-9;:@&%=+\/\$_.-]*)?"; // GET Query
    $regex .= "(#[a-z_.-][a-z0-9+\$_.-]*)?"; // Anchor 
	return preg_match("/^$regex$/", $text);
}


/**
*form alter function to add form field validation.
**/
function ffv_form_alter(&$form, &$form_state, $form_id){
	//print_r($form_state);  die;
	if(!empty($form['#entity_type']) && $form['#entity_type'] == "node"){
		$form['#validate'][] = "node_form_field_validation";
		foreach($form_state['field'] as $key=>$value){
			if(!empty($form_state['field'][$key]['und'])){
				if($form_state['field'][$key]['und']['field']['module'] == "image" || $form_state['field'][$key]['und']['field']['module'] == "file"){  
					$arr = $form[$key]['und']; 
					if(!empty($arr['#file_upload_delta'])){  
						$form[$key]['und'][$arr['#file_upload_delta']]['#upload_validators']['ffv_upload_validate'] = array();
					}else{
						$form[$key]['und'][0]['#upload_validators']['ffv_upload_validate'] = array();
					}
				}
			}
		}
	}elseif($form_id == "validation_form"){
		
	}elseif($form_id == "search_form"){
		$form['#validate'][] = "node_form_field_validation";
	}elseif(!empty($form_state['webform'])){
		$form['#validate'][] = "node_form_field_validation";
	}else{
		//$form['#validate'][] = "node_form_field_validation";
	}
}

function node_form_field_validation($form, $form_state){
	$message = array('mobile' => 'Please enter a valid mobile number.', 'email' => 'Please enter a valid Email Address.',            'numeric' => 'Please enter a only Numeric value.', 'alpha_numeric' => 'Please enter only Alpha-numeric value.', 'white_box' => 'Please enter a valid value.', 'black_box' => 'The value you have entered is not allowed.', 'url' => 'Please enter a valid URL.');
	//echo "<pre>";
	//print_r($form_state['input']); die;
	//echo "<pre>";
	//print_r($form_state);
	//die;
	if(!empty($form_state['input']['keys']) && $form_state['build_info']['form_id'] == "search_form"){ 
		if(ffv_validate_field($form_state['values']['keys'], "white_box") == 1){    
			form_set_error('keys', $message['white_box']); 
		}
	}elseif(!empty($form_state['webform']) && count($form_state['webform']) > 0){  
		foreach($form_state['input']['submitted'] as $key=>$value){
			if(!empty($value) && ffv_validate_field($form_state['values']['submitted'][$key], "white_box") == 1){    
				form_set_error('submitted]['.$key, $message['white_box']); 
			}
		}
	}elseif(!empty($form_state['input']['form_id']) && $form_state['input']['form_id'] == "user_login"){
		foreach($form_state['input'] as $key=>$value){
			if(ffv_validate_field($form_state['values'][$key], "white_box") == 1){  
				form_set_error($key, $message['white_box']); 
			}
		} 
	}elseif(!empty($form_state['input']['form_id']) && $form_state['input']['form_id'] == "user_register_form"){
		foreach($form_state['input'] as $key=>$value){
			if(!is_array($value)){
				if(ffv_validate_field($value, "white_box") == 1){  
					form_set_error($key, $message['white_box']); 
				}
			}
		}
		foreach($form_state['input']['profile_main'] as $key=>$value){
			if($form_state['field']['#parents']['profile_main']['#fields'][$key]['und']['field']['module'] == "text"){ 
				if(ffv_validate_field($form_state['values']['profile_main'][$key]['und'][0]['value'], "white_box") == 1){  
					form_set_error('profile_main]['.$key, $message['white_box']); 
				}
			}elseif($form_state['field']['#parents']['profile_main']['#fields'][$key]['und']['field']['module'] == "number"){
				if(ffv_validate_field($form_state['values']['profile_main'][$key]['und'][0]['value'], "numeric") == 1){  
					form_set_error($key, $message['numeric']); 
				}
			}elseif($form_state['field']['#parents']['profile_main']['#fields'][$key]['und']['field']['module'] == "taxonomy"){
				if(ffv_validate_field($form_state['values']['profile_main'][$key]['und'][0]['tid'], "numeric") == 1){  
					form_set_error($key, $message['numeric']); 
				}
			}else{
				if(ffv_validate_field($form_state['values']['profile_main'][$key]['und'][0]['value'], "white_box") == 1){  
					form_set_error($key, $message['white_box']); 
				}
			}
		}
	}elseif($form_state['input']['form_id'] == "views_exposed_form"){
		foreach($form_state['input'] as $key=>$value){
			if(!is_array($value)){
				if(ffv_validate_field($form_state['input'][$key], "white_box") == 1){  
					form_set_error($key, $message['white_box']); 
				}
			}
		}
	}else{
	//print_r($form_state); die;
		foreach($form_state['input'] as $key=>$value){
			$pos = strpos($key, "field_");
			if(is_numeric($pos)){
				
				$val_type = db_select('validate_fields', 'v')
				  ->condition('fields_name', $key)
				  ->condition('content_type', $form['type']['#value']) 
				  ->fields('v', array('validation_type'))
				  ->execute()
				  ->fetchField();
				
				if(empty($message[$val_type])){
					$message[$val_type] = 'Please enter a valid value.';
				}
				if(!empty($form_state['values'][$key]['und'])){
					if($form_state['field'][$key]['und']['field']['module'] == "text"){   
						if(empty($val_type)){
							if(ffv_validate_field($form_state['values'][$key]['und'][0]['value'], $val_type) == 1){  
								form_set_error($key, $message['white_box']); 
							}
						}else{
							if(ffv_validate_field($form_state['values'][$key]['und'][0]['value'], $val_type) == 1){  
								form_set_error($key, $message[$val_type]); 
							}
						}
						
					}elseif($form_state['field'][$key]['und']['field']['module'] == "taxonomy"){
						if($form_state['values'][$key]['und'][0]['tid'] == "autocreate"){
							if(empty($val_type)){
								if(ffv_validate_field($form_state['values'][$key]['und'][0]['name'], $val_type) == 1){
									form_set_error($key, $message['white_box']); 
								}
							}else{
								if(ffv_validate_field($form_state['values'][$key]['und'][0]['name'], $val_type) == 1){
									form_set_error($key, $message[$val_type]); 
								}
							}
						}else{
							if(empty($val_type)){
								if(ffv_validate_field($form_state['values'][$key]['und'][0]['tid'], $val_type) == 1){
									form_set_error($key, $message['white_box']); 
								}
							}else{
								if(ffv_validate_field($form_state['values'][$key]['und'][0]['tid'], 'numeric') == 1){
									form_set_error($key, $message[$val_type]); 
								}
							}
						}
					}elseif($form_state['field'][$key]['und']['field']['module'] == "node"){
						if(empty($val_type)){
							if(ffv_validate_field($form_state['values'][$key]['und'][0]['nid'], $val_type) == 1){
								form_set_error($key, $message['white_box']); 
							}
						}else{
							if(ffv_validate_field($form_state['values'][$key]['und'][0]['nid'], 'numeric') == 1){
								form_set_error($key, $message[$val_type]); 
							}
						}
					}elseif($form_state['field'][$key]['und']['field']['module'] == "user"){
						if(empty($val_type)){
							if(ffv_validate_field($form_state['values'][$key]['und'][0]['uid'], $val_type) == 1){
								form_set_error($key, $message['white_box']); 
							}
						}else{
							if(ffv_validate_field($form_state['values'][$key]['und'][0]['uid'], 'numeric') == 1){
								form_set_error($key, $message[$val_type]); 
							}
						}
					}
				}
			}else{
				if($key == "body" && $form_state['values']['body']['und'][0]['value'] != ""){
					$val_type = db_select('validate_fields', 'v')
						  ->condition('fields_name', $form_state['field']['body'])
						  ->condition('content_type', $form['type']['#value']) 
						  ->fields('v', array('validation_type'))
						  ->execute()
						  ->fetchField();
					if($val_type){
						if(empty($message[$val_type])){
							$message[$val_type] = 'Please enter a valid value.';
						}
						if(ffv_validate_field($form_state['values']['body']['und'][0]['value'], $val_type) == 1 || 	 		ffv_validate_field($form_state['values']['body']['und'][0]['summary'], $val_type) == 1 ){
							form_set_error($key, $message[$val_type]); 
						}
					}else{
						if(ffv_validate_field($form_state['values']['body']['und'][0]['value'], "black_box") == 1 || ffv_validate_field($form_state['values']['body']['und'][0]['summary'], "black_box") == 1 ){
							form_set_error($key, 'Please enter a valid value in body.'); 
						}
					}
				}elseif($key == "title"|| $key == "form_build_id"  || $key == "form_token"){
					//$message_title = 'Please enter a valid value.';
					$val_type = "";
					if(ffv_validate_field($form_state['values'][$key], $val_type) == 1){
						form_set_error($key, 'Please enter a valid value.'); 
					}
				}	
			}
		} 
	}
	
}

/***************File type validation***********************/
function ffv_upload_validate($file) { 
	$errors = array();
	$ext_match = array(); 
	$finfo = finfo_open(FILEINFO_MIME_TYPE);
	if (!$finfo) {
		$errors[] = t('File Info Library Missing');       	
   	}
   	else {
		$filepath =$file->uri;
		$filename =$file->filename;
		$mimetyy = finfo_file($finfo, $filepath, FILEINFO_MIME_TYPE);		
		$tyy = explode("/", $mimetyy);
		$path_info = pathinfo($filename);
		$extt = $path_info['extension'];
		$iserror = false;
		
		switch($tyy[1]) {
			case 'plain':
				if ($tyy[0]=='text') { 
					$ext_match = array('doc','docx','txt');					
				}
				break;
			case 'zip':
				if ($tyy[0]=='application') { 
					$ext_match = array('doc','docx','txt','zip','ppt','pptx');					
				}
				break;
			case 'x-rar':				
				if ($tyy[0]=='application') { 
					$ext_match = array('doc','docx','txt','rar');					
				}
				break;
			case 'pdf':
				if ($tyy[0]=='application') { 
					$ext_match = array('pdf');					
				}
				break;
			case 'vnd.oasis.opendocument.text':
				$ext_match = array('odt');
				break;
			case 'jpeg':
				$ext_match = array('jpg','png','gif','JPG');
				break;
			case 'png':
				$ext_match = array('jpg','png','gif','JPG');
				break;
			case 'gif':
				$ext_match = array('jpg','png','gif','JPG');
				break;
			case '3gpp':
				$ext_match = array('3gp','video');
				break;
			case 'mp4':
				$ext_match = array('video','mp4');
				break;
			case 'mpeg':
				$ext_match = array('video','mpeg','vob');
				break;
			case 'octet-stream':
				$ext_match = array('video','octet-stream','ifo','xlsx','xls','ppt','pptx');
				break;
			case 'xml':
				$ext_match = array('xml','xls','ppt','pptx');
				break;
			case 'vnd.openxmlformats-officedocument.spreadsheetml.sheet':
				$ext_match = array('xml','xls','xlsx','ppt','pptx');
				break;
			case 'vnd.ms-office':
				$ext_match = array('xml','xls','xlsx','ppt','pptx');
				break;
			case 'vnd.openxmlformats-officedocument.presentationml.presentation':
				$ext_match = array('ppt','pptx');
				break;
			case 'x-empty':
				$ext_match = array('ppt','pptx');
				break;
			default:
				$iserror = true;
				break;
		}		
		if (in_array(trim(strtolower($extt)), $ext_match) && !$iserror){ }
		else {
			$key = '';
			$errors[] = t('Not a Valid File Type');
			//$errors[] = form_set_error($key, 'Not a Valid File Type');
		}
	}
	return $errors;
}

function ffv_validate_field($text, $type){
	$black_parameter = variable_get('blackbox_pattern');
	# added by waliullah 
	# added date 5-20-2016
	# #    
	$white_parameter =  variable_get('whitebox_pattern');
	#     
	if(empty($white_parameter)){
		$white_parameter = "\x{900}-\x{97F}\ a-zA-Z0-9 | | @&$%,:.\-\_\(\)";
	}else{
		$white_parameter = variable_get('whitebox_pattern');
	}
	switch($type){
		case 'url':
			$pattern = "/\b(?:(?:https?|ftp):\/\/|www\.)[-a-z0-9+&@#\/%?=~_|!:,.;]*[-a-z0-9+&@#\/%=~_|]/i";
			break;
		case 'mobile':
			$pattern = "/^[0-9]$/";
			//$pattern = "/^\(?([2-9]\d{2})(\)?)(-|.|\s)?([1-9]\d{2})(-|.|\s)?(\d{4})$/";
			break;
		case 'email':
			$pattern = "`^[a-z0-9!#$%&'*+\/=?^_\`{|}~-]+(?:\.[a-z0-9!#$%&'*+\/=?^_\`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$`i";
			break;
		case 'numeric': 
			$pattern = "/^[0-9]+$/";
			break;
		case 'alpha_numeric':
			$pattern = "/^[a-zA-Z 0-9]+$/";
			break;
		case 'black_box':
			$pattern = "/^([".$black_parameter."])+$/ui";
			break;
		case 'white_box':
			$pattern = "/^([".$white_parameter."])+$/ui";			
			break;
		default:
			$pattern = "/^([".$white_parameter."])+$/ui";
			//$pattern = "/^([\x{900}-\x{97F}\ a-zA-Z0-9 | | @&$%,:.\-\_\(\)])+$/ui";
			//$pattern = "/^([\x{900}-\x{97F}\ a-zA-Z0-9 | | @&$%,:.\-\_])+$/";
			//echo $pattern.'---=='.$key.'==----------';
			//die('3234');
			break;
	}
	$str = trim($text);
	//echo $pattern;
	//die;
	if (is_null($str) || $str == "") {
		return FALSE;
	}
	if($type == "black_box"){ 
		$exp = explode(PHP_EOL, $black_parameter);
		//print_r($exp);  die;
		foreach ($exp as $bad) { 
			if(trim($bad) != ''){
				if (strpos($str, trim(html_entity_decode($bad))) == TRUE) {
					return 1;	
				}	
			}
			
		} 
	}else{
		if(trim(preg_match($pattern, $str))){
			return 0;
		} else{
			return 1;
		}
	}
}



function ffv_menu(){
	$items['admin/config/development/ct-list/validation'] = array(
		'title' => 'Validation Configuration',
		'page callback' => 'call_validation_form',
		'access callback' => 'ffv_access',
		'type' => MENU_NORMAL_ITEM,
	);
	$items['admin/config/development/ct-list'] = array(
		'title' => 'Content Type Configuration',
		'page callback' => 'content_type_list',
		'access callback' => 'ffv_access',
		'type' => MENU_NORMAL_ITEM,
	); 
	$items['admin/config/field/validation/%'] = array(
		'title' => 'Field Validation Configuration',
		'page callback' => 'call_field_validation_form',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK,
	); 
	$items['admin/config/field/validation/%/delete'] = array(
		'title' => 'Delete item',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('validation_form_delete', 1),
		'access callback' => TRUE,
		'type' => MENU_CALLBACK,
	);
	return $items;
}


/**
 * Determine whether the user has permission to use menu_block module.
 */
function ffv_access($account = NULL) {
	return user_access('administer blocks', $account) && user_access('administer menu', $account);
}


function content_type_list(){
	global $base_url;
	$fields = field_info_instances($entity_type = NULL, $bundle_name = NULL);
	$output = '';
	$css = ".views-ui-description input.form-text {width: 26%; float: left; margin-right: 6px}";
	drupal_add_css( $css, $option["type"] = "inline" );
	$output.='<table id="ctools-export-ui-list-items" class="sticky-enabled tableheader-processed sticky-table">
				<thead>
					<tr>
						<th class="views-ui-description">Name</th>
						<th class="views-ui-operations">Operation</th>
					</tr>
				</thead>
				<tbody>';
					foreach($fields['node'] as $key => $val){
						$output.='<tr title="Machine name: '.node_type_get_name($key).'" class="ctools-export-ui-enabled odd"><td class="views-ui-name">'.node_type_get_name($key).'</td>
						<td class="views-ui-description"><a href="'.$base_url.'/admin/config/field/validation/'.$key.'" class="form-submit">Add OR Edit</a> / <a href="'.$base_url.'/admin/config/field/validation/'.$key.'/delete" class="form-submit">Delete</a></td></tr>';
					}	
					$output.='<tr title="Machine name: Custom Form" class="ctools-export-ui-enabled odd"><td class="views-ui-name">Add Custom Form</td><td class="views-ui-description">'.drupal_render(drupal_get_form("add_form_to_validation")).'</td></tr></tbody>
			</table>';
return $output;
}

function add_form_to_validation($form, &$form_state){
  $form = array();
  $form['add_form_id'] = array(
    '#title' => t('Enter Form ID'),
    '#type' => 'textfield',
  ); 
  $form['submit'] = array(
    '#type' => 'submit', 
    '#value' => t('Add'),
  );
return $form;
}

function add_form_to_validation_submit($form, &$form_state){
	
}

function call_field_validation_form(){
	$_SESSION['content_type'] = arg(4);
	return drupal_get_form('validation_field_form');
	
}

function validation_field_form($form, &$form_state){
	$form = array();
	$arg = $_SESSION['content_type'];
	$results = db_select('validate_fields', 't')
			  ->fields('t')
			  ->condition('content_type', $arg)
			  ->execute()
			  ->fetchAll();
	$count_row = count($results);
	if($count_row > 0){
		$count = $count_row;
	}else{
		$count = 1;
	}
	$fields = field_info_instances($entity_type = 'node', $bundle_name = $arg);
	$options = array();
	$cases = array('' => '--Select validation type --', 'mobile' => 'mobile', 'email' => 'email', 'numeric' => 'numeric', 'alpha_numeric' => 'alpha_numeric', 'white_box' => 'white_box', 'black_box' => 'black_box', 'url' => 'url');
	foreach($fields as $key => $val){
		$options[$key] = $key.' ( ' .$val["label"]. ' )';
	}
		$form['#tree'] = TRUE;
		$form['names_fieldset'] = array(
			'#type' => 'fieldset',
			'#title' => t('Validation Section'),
			'#collapsible' => TRUE, // Added
			'#collapsed' => FALSE,  // Added
			'#prefix' => '<div id="names-fieldset-wrapper">',
			'#suffix' => '</div>',
		);
		if (empty($form_state['num_names'])) {
			$form_state['num_names'] = $count;
		}
		for ($i = 0; $i < $form_state['num_names']; $i++) {
			if(!isset($results[$i]->fields_name)){
				$results[$i]->fields_name = "";
				$results[$i]->validation_type = "";
			}
			$form['names_fieldset'][$i] = array(
				'#prefix' => '<div class="two-col">',
				'#suffix' => '</div>'
			);
			$form['names_fieldset'][$i]['field_section'] = array(
				'#type' => 'fieldset',
				'#title' => t('Field Section'),
				'#required' => true,
				'#collapsible' => TRUE, // Added
				'#collapsed' => False,  // Added
			);
			$form['names_fieldset'][$i]['field_section']['field_list'] = array(
				'#type' => 'select',
				'#title' => t('Select Field'),
				'#options' => $options,
				'#default_value' => $results[$i]->fields_name,
				'#empty_option' => '--Select Field--',
				'#required' => true,
			);
			$form['names_fieldset'][$i]['field_section']['cases']= array(
				'#type' => 'select',
				'#title' => t('Select Case'),
				'#options' => $cases,
				'#required' => TRUE,
				'#default_value' => $results[$i]->validation_type,
			);
		}
		$form['names_fieldset']['add_name'] = array(
			'#type' => 'submit',
			'#value' => t('Add one more'),
			'#submit' => array('ajax_example_add_more_add_one'),
			'#ajax' => array(
				'parameters' => array('arg' => $arg),
				'callback' => 'ajax_example_add_more_callback',
				'wrapper' => 'names-fieldset-wrapper',
			  
			),
			'#limit_validation_errors' => array(), // No elements will be validated
		);
	  if ($form_state['num_names'] > 1) {
		$form['names_fieldset']['remove_name'] = array(
		  '#type' => 'submit',
		  '#value' => t('Remove one'),
		  '#submit' => array('ajax_example_add_more_remove_one'),
		  '#ajax' => array(
			'callback' => 'ajax_example_add_more_callback',
			'wrapper' => 'names-fieldset-wrapper',
		  ),
		  '#limit_validation_errors' => array(), // No elements will be validated
		);
	  }
	
		$form['submit_button'] = array(
			'#type' => 'submit',
			'#value' => t('Submit'),
		);
return $form;
}

/**
 * Callback for both ajax-enabled buttons.
 *
 * Selects and returns the fieldset with the names in it.
 */
function ajax_example_add_more_callback($form, $form_state) {
  return $form['names_fieldset'];
}

/**
 * Submit handler for the "add-one-more" button.
 *
 * Increments the max counter and causes a rebuild.
 */
function ajax_example_add_more_add_one($form, &$form_state) {
  $form_state['num_names']++;
  $form_state['rebuild'] = TRUE;
}

/**
 * Submit handler for the "remove one" button.
 *
 * Decrements the max counter and causes a form rebuild.
 */
function ajax_example_add_more_remove_one($form, &$form_state) {
  if ($form_state['num_names'] > 1) {
	//print_r($form_state); die;
	$content_type = $_SESSION['content_type'];
	$count = count($form_state['input']['names_fieldset']);
	$key = $count - 1;
	$num_deleted = db_delete('validate_fields')
				  ->condition('content_type', $content_type)
				  ->condition('fields_name', $form_state['input']['names_fieldset'][$key]['field_section']['field_list'])
				  ->execute();
    $form_state['num_names']--;
  }
  $form_state['rebuild'] = TRUE;
}

function validation_field_form_submit($form, &$form_state){
	global $base_url;
	$content_type = $_SESSION['content_type'];
	//print_r($form_state); die;
	foreach($form_state['input']['names_fieldset'] as $field){
		$id = db_select("validate_fields", "tv")
						  ->fields("tv", array("id"))
						  ->condition("content_type", $content_type)
						   ->condition("fields_name", $field['field_section']['field_list'])
						  ->execute()
						  ->fetchField();
		if($id){
			$num_updated = db_update('validate_fields') // Table name no longer needs {}
							  ->fields(array(
								'validation_type' => $field['field_section']['cases'],
							  ))
							  ->condition('content_type', $content_type)
							  ->condition('fields_name', $field['field_section']['field_list'])
							  ->execute();
		}else{
			$insert_val = db_insert('validate_fields') // Table name no longer needs {}
						->fields(array(
						  'validation_type' => $field['field_section']['cases'],
						  'fields_name' => $field['field_section']['field_list'],
						  'content_type' => $content_type,
						))->execute();
		}
		
	}
	$type = $_SESSION['content_type'];
	unset($_SESSION['content_type']);
	drupal_set_message(t("Configuration has been saved."));
	drupal_goto($base_url.'/admin/config/field/validation/'.$type);
}

function call_validation_form(){
	return drupal_get_form('validation_form');
}

function validation_form_delete($form, &$form_state, $the_id) {
	$form = array();
	$form['the_id'] = array(
		'#type' => 'value',
		'#value' => $the_id,
	);
	$form['content_type'] = array(
		'#type' => 'value',
		'#value' => arg(4),
	);

	return confirm_form(
		$form,
		t('Are you sure you want to delete this item?'),
		'admin/config/development/ct-list',
		t('This action cannot be undone.'),
		t('Delete'),
		t('Cancel')
	);


	return $form;
}

function validation_form_delete_submit($form, &$form_state) {
	//dpm($form_state['values']);
	//print_r($form_state); die;

	if ($form_state['values']['the_id'] == 'config') {
		$num_deleted = db_delete('validate_fields')
				  ->condition('content_type', $form_state['values']['content_type'])
				  ->execute();
	}


	drupal_set_message('You have deleted the item ' . $form_state['values']['content_type'] . '.');
	$form_state['redirect'] = 'admin/config/development/ct-list';
}


function validation_form($form, &$form_state){
	$form = array();
	if(variable_get('blackbox_pattern')!= NULL){
		$default_blockbox_val = variable_get('blackbox_pattern');	
	}else{
		$default_blockbox_val = "<script>
		<
		>
		alert()
		</script>
		";	
	}
	if(variable_get('whitebox_pattern')!= NULL){
		$default_whitebox_val = variable_get('whitebox_pattern');	
	}else{
		$default_whitebox_val = "\x{900}-\x{97F}\ a-zA-Z0-9 | | @&$%,:.\-\_\(\)";		
	}
	$form['blackbox_pattern'] = array(
		'#title' => t('Blackbox Pattern'),
		'#type' => 'textarea',
		'#description' => t('Field to add all the pattern with new line to add the blackbox checking.'),
		'#required' => true,
		'#default_value' => $default_blockbox_val,
	);
	$form['whitebox_pattern'] = array(
		'#title' => t('Whitebox Pattern'),
		'#type' => 'textarea',
		'#description' => t('Field to add all the pattern to add for the whitebox checking.'),
		'#default_value' => $default_whitebox_val,
	);
	$form['submit_button'] = array(
		'#type' => 'submit',
		'#value' => t('Submit'),
	);
return $form;
}

function validation_form_submit($form, &$form_state){
	global $base_url;
	//print_r($form_state); die;
	variable_set('blackbox_pattern', $form_state['input']['blackbox_pattern']);
	variable_set('whitebox_pattern', $form_state['input']['whitebox_pattern']);
    drupal_set_message(t('Your configuration has been saved.'));
	drupal_goto($base_url.'/admin/config/development/ct-list/validation');
}


